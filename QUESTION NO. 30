#include <stdio.h>
#include <stdlib.h>

// Structure of a queue node
struct QueueNode {
    int data;
    struct QueueNode* next;
};

// Structure of a queue
struct Queue {
    struct QueueNode* front;
    struct QueueNode* rear;
};

// Create a new queue node
struct QueueNode* createQueueNode(int data) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Create a new queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}

// Enqueue an element into the queue
void enqueue(struct Queue* q, int data) {
    struct QueueNode* newNode = createQueueNode(data);
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }
    q->rear->next = newNode;
    q->rear = newNode;
}

// Dequeue an element from the queue
int dequeue(struct Queue* q) {
    if (q->front == NULL)
        return -1; // Queue is empty
    struct QueueNode* temp = q->front;
    q->front = q->front->next;
    int data = temp->data;
    free(temp);
    if (q->front == NULL)
        q->rear = NULL;
    return data;
}

// Implementing stack using two queues
struct StackUsingQueues {
    struct Queue* q1;
    struct Queue* q2;
};

// Initialize a stack
struct StackUsingQueues* createStack() {
    struct StackUsingQueues* stack = (struct StackUsingQueues*)malloc(sizeof(struct StackUsingQueues));
    stack->q1 = createQueue();
    stack->q2 = createQueue();
    return stack;
}

// Push an element onto the stack
void push(struct StackUsingQueues* stack, int data) {
    enqueue(stack->q1, data);
}

// Pop an element from the stack
int pop(struct StackUsingQueues* stack) {
    if (stack->q1->front == NULL)
        return -1; // Stack is empty
    while (stack->q1->front->next != NULL) {
        enqueue(stack->q2, dequeue(stack->q1));
    }
    int data = dequeue(stack->q1);
    struct Queue* temp = stack->q1;
    stack->q1 = stack->q2;
    stack->q2 = temp;
    return data;
}

int main() {
    struct StackUsingQueues* stack = createStack();
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);

    printf("%d\n", pop(stack)); // Output: 3
    printf("%d\n", pop(stack)); // Output: 2

    push(stack, 4);
    printf("%d\n", pop(stack)); // Output: 4

    return 0;
}
